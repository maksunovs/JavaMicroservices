version: '3.8'
volumes:
  resources_data: null
  songs_data: null
  storages_data: null
  prometheus_data: null
  ls_data: null
  es_data: null
  kb_data: null
services:
  resources_db:
    image: 'postgres:13.3-alpine'
    env_file:
      - resource_db.env
    volumes:
      - 'resources_data:/var/lib/postgresql/data/pgdata'
    ports:
      - '5432:5432'
  songs_db:
    image: 'postgres:13.3-alpine'
    env_file:
      - song_db.env
    volumes:
      - 'songs_data:/var/lib/postgresql/data/pgdata'
    ports:
      - '5433:5432'
  storages_db:
    image: 'postgres:13.3-alpine'
    env_file:
      - storage_db.env
    volumes:
      - 'storages_data:/var/lib/postgresql/data/pgdata'
    ports:
      - '5434:5432'
  service-registry:
    build:
      context: ./ServiceDiscoveryTask
      dockerfile: ./ServiceRegistry/dockerfile
    ports:
      - '8083:8083'
    env_file:
      - service_registry.env
  api-gateway:
    build:
      context: ./ServiceDiscoveryTask
      dockerfile: ./ApiGateway/dockerfile
    ports:
      - '8080:8080'
    env_file:
      - api_gateway.env
  resources-service:
    build: ./ResourceService
    ports:
      - '8181:8181'
      - '8000:8000'
    env_file:
      - resources_service.env
    depends_on:
      - resources_db
  songs-service:
    build: ./SongService
    deploy:
      mode: replicated
      replicas: 2
    env_file:
      - songs_service.env
    depends_on:
      - songs_db
  storages-service:
    build: ./StorageService
    env_file:
      - storages_service.env
    depends_on:
      - storages_db
  minio-service:
     image: 'quay.io/minio/minio'
     volumes: 
      - ./data:/data
     ports:
     - 9000:9000
     - 9001:9001
     environment:
       MINIO_ROOT_USER: 'minio_user'
       MINIO_ROOT_PASSWORD: 'minio_password'
       MINIO_ADDRESS: ':9000'
       MINIO_CONSOLE_ADDRESS: ':9001'
     command: minio server /data
  resources-processor:
    build: ./ResourceProcessor
    env_file:
      - resources_processor.env
  zookeeper-service:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
      
  kafka-service:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper-service
    ports:
      - 29093:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-service:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka-service:29092, OUTSIDE://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka-ui-service:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-service:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper-service:2181
    links:
      - kafka-service
      - zookeeper-service
    depends_on:
      - kafka-service
      - zookeeper-service
  prometheus:
    image: prom/prometheus
    volumes:
      - "./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
      - "prometheus_data:/prometheus"
    ports:
      - "9090:9090"
  grafana:
    build: './monitoring/grafana'
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
  elasticsearch:
    image: elasticsearch:7.9.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data/
      - ./monitoring/elk-config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
  logstash:
    image: logstash:7.9.1
    container_name: logstash
    ports:
      - "7000:7000"
      - "9600:9600"
    volumes:
      - ./monitoring/elk-config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./monitoring/elk-config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ls_data:/usr/share/logstash/data
    depends_on:
      - elasticsearch
  kibana:
    image: kibana:7.9.1
    container_name: kibana
    ports:
      - "5601:5601"
    volumes:
      - ./monitoring/elk-config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kb_data:/usr/share/kibana/data
    depends_on:
      - elasticsearch
  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"